pipeline {
    agent any
    
    parameters{
        string(name: 'image', defaultValue: '1.0.0' )
 
    }

    environment{
        
        ECR_URL="432211875745.dkr.ecr.us-east-1.amazonaws.com"
        ECS_CLUSTER_NAME= "boxing_cluster"
        ECS_SERVICE_NAME= "boxingapp-service"
        
        }

 //--------------------------------------------------------------------------------------------------

    stages {
        // stage('build image') {                                     //gilbert2kengni067
        //     steps {
        //         script{
        //             // This step should not normally be used in your script. Consult the inline help for details.
        //              withDockerRegistry(credentialsId: 'dockerhub_id') {
        //              echo '==========Executing===================================================='
        //              sh "docker build -t myapp:${params.image} ." 
        //              sh "docker tag myapp:${params.image} gilbert2kengni067/myapp:${params.image}"
        //              sh "docker push gilbert2kengni067/myapp:${params.image}"
        //             }
        //         }
                       
        //     }
      
        
        stage("Build and push to ECR"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'ecr:us-east-1:boxingapp_id', url: '432211875745.dkr.ecr.us-east-1.amazonaws.com/boxingapp-ecr:null')  {

                        sh "docker build -t myapp:${params.image } ." 
                        sh "docker tag myapp:${params.IMAGETAG} ${ECR_URL}/boxingapp-ecr:${params.IMAGETAG} "

                        sh "docker tag myapp:${params.IMAGETAG} ${ECR_URL}/boxingapp-ecr:latest"
                        sh "docker push ${ECR_URL}/boxingapp-ecr:latest"

                        sh "docker push ${ECR_URL}/boxingapp-ecr:${params.IMAGETAG}"
                    }
                }
            }
        }
//----------------------------------------------------------------------------------------------- 

        // stage("Build and push ECS"){
        //     steps{
               
        //         sh "aws ecs update-service --cluster ${ECS_CLUSTER_NAME} --service  ${ECS_SERVICE_NAME} --force-new-deployment"      
        //     }
        // } 

//-------------------------------------------------------------------------------------------------------------        
    }     
}
